<?php
/**
 * Synthetic dataset provider for the block editor preview.
 */

if ( ! defined( 'WPINC' ) ) {
    die;
}

if ( ! class_exists( 'My_Articles_Block_Preview_Adapter' ) ) {
    class My_Articles_Block_Preview_Adapter implements My_Articles_Content_Adapter_Interface {
        /**
         * Returns normalized preview data for the block editor.
         *
         * @param array<string, mixed> $options Unused shortcode options placeholder.
         * @param array<string, mixed> $config  Optional adapter configuration.
         * @param array<string, mixed> $context Runtime context shared with the block.
         *
         * @return array<string, mixed>
         */
        public function get_items( array $options, array $config = array(), array $context = array() ) {
            $attributes = isset( $context['attributes'] ) && is_array( $context['attributes'] )
                ? $context['attributes']
                : array();

            $data = $this->get_default_preview_data();

            /**
             * Filters the preview data rendered inside the block editor.
             *
             * @param array<string, mixed> $data       Preview dataset generated by the adapter.
             * @param array<string, mixed> $attributes Block attributes provided by the editor.
             * @param array<string, mixed> $context    Additional rendering context.
             */
            $filtered = apply_filters( 'my_articles_block_preview_data', $data, $attributes, $context );

            if ( is_array( $filtered ) ) {
                if ( isset( $filtered['items'] ) && is_array( $filtered['items'] ) ) {
                    $data['items'] = $filtered['items'];
                }

                if ( isset( $filtered['cta'] ) && is_array( $filtered['cta'] ) ) {
                    $data['cta'] = array_merge( $data['cta'], $filtered['cta'] );
                }
            }

            $data['items'] = $this->normalize_items( $data['items'] );
            $data['cta']   = $this->normalize_cta( $data['cta'] );

            return $data;
        }

        /**
         * Provides a curated list of placeholder entries for the preview.
         *
         * @return array<string, mixed>
         */
        private function get_default_preview_data() {
            return array(
                'items' => $this->get_default_items(),
                'cta'   => array(
                    'label' => __( 'Voir tous les articles', 'mon-articles' ),
                ),
            );
        }

        /**
         * Builds the default placeholder items displayed in the editor.
         *
         * @return array<int, array<string, string>>
         */
        private function get_default_items() {
            $excerpt = __( 'Ajustez les paramètres du module pour personnaliser la sélection d’articles.', 'mon-articles' );
            $categories = array(
                __( 'Actualités locales', 'mon-articles' ),
                __( 'Culture et loisirs', 'mon-articles' ),
                __( 'Vie associative', 'mon-articles' ),
            );
            $dates = array(
                __( '12 avril 2024', 'mon-articles' ),
                __( '05 avril 2024', 'mon-articles' ),
                __( '29 mars 2024', 'mon-articles' ),
            );

            $items = array();

            for ( $index = 0; $index < 3; $index++ ) {
                $items[] = array(
                    'title'    => sprintf( __( 'Article de démonstration %d', 'mon-articles' ), $index + 1 ),
                    'excerpt'  => $excerpt,
                    'category' => $categories[ $index % count( $categories ) ],
                    'date'     => $dates[ $index % count( $dates ) ],
                );
            }

            return $items;
        }

        /**
         * Normalizes the preview items to guarantee a consistent structure.
         *
         * @param mixed $items Candidate preview items.
         *
         * @return array<int, array<string, string>>
         */
        private function normalize_items( $items ) {
            if ( ! is_array( $items ) || empty( $items ) ) {
                $items = $this->get_default_items();
            }

            $normalized = array();

            foreach ( array_values( $items ) as $index => $item ) {
                if ( ! is_array( $item ) ) {
                    $item = array();
                }

                $default_title    = sprintf( __( 'Article de démonstration %d', 'mon-articles' ), $index + 1 );
                $default_excerpt  = __( 'Ajustez les paramètres du module pour personnaliser la sélection d’articles.', 'mon-articles' );
                $default_category = __( 'Rubrique en avant', 'mon-articles' );
                $default_date     = __( '01 janvier 2024', 'mon-articles' );

                $title    = $this->normalize_string_value( isset( $item['title'] ) ? $item['title'] : $default_title );
                $excerpt  = $this->normalize_string_value( isset( $item['excerpt'] ) ? $item['excerpt'] : $default_excerpt );
                $category = $this->normalize_string_value( isset( $item['category'] ) ? $item['category'] : $default_category );
                $date     = $this->normalize_string_value( isset( $item['date'] ) ? $item['date'] : $default_date );

                if ( '' === $title ) {
                    $title = $default_title;
                }

                if ( '' === $excerpt ) {
                    $excerpt = $default_excerpt;
                }

                if ( '' === $category ) {
                    $category = $default_category;
                }

                if ( '' === $date ) {
                    $date = $default_date;
                }

                $normalized[] = array(
                    'title'    => $title,
                    'excerpt'  => $excerpt,
                    'category' => $category,
                    'date'     => $date,
                );
            }

            return $normalized;
        }

        /**
         * Normalizes the footer call-to-action data.
         *
         * @param mixed $cta CTA descriptor.
         *
         * @return array<string, string>
         */
        private function normalize_cta( $cta ) {
            if ( ! is_array( $cta ) ) {
                $cta = array();
            }

            $label = isset( $cta['label'] ) ? $this->normalize_string_value( $cta['label'] ) : '';

            if ( '' === $label ) {
                $label = __( 'Voir tous les articles', 'mon-articles' );
            }

            return array( 'label' => $label );
        }

        /**
         * Ensures a scalar string is returned for preview placeholders.
         *
         * @param mixed $value Raw value coming from filters.
         *
         * @return string
         */
        private function normalize_string_value( $value ) {
            if ( is_scalar( $value ) || ( is_object( $value ) && method_exists( $value, '__toString' ) ) ) {
                $value = (string) $value;
            } else {
                $value = '';
            }

            return trim( wp_strip_all_tags( $value ) );
        }
    }
}
