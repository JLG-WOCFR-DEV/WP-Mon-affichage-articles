(function(factory){
    if (typeof define === 'function' && define.amd) {
        define(['jquery'], factory);
    } else if (typeof exports === 'object') {
        module.exports = factory(require('jquery'));
    } else {
        factory(jQuery);
    }
}(function($){
    'use strict';

    var defaults = {
        placeholder: '',
        minimumInputLength: 0,
        ajax: null
    };

    function Select2(element, options) {
        this.$element = $(element);
        this.options = $.extend(true, {}, defaults, options || {});
        this.$container = null;
        this.$selection = null;
        this.$rendered = null;
        this.$search = null;
        this.$dropdown = null;
        this.$results = null;
        this.searchTimer = null;
        this.cache = {};
        this.disabled = this.$element.prop('disabled');
        this._init();
    }

    Select2.prototype._init = function() {
        var self = this;
        this.$element.addClass('select2-hidden-accessible');
        this.$element.attr('tabindex', '-1');

        this.$container = $('<span class="select2 select2-container" aria-hidden="true"></span>');
        this.$selection = $('<span class="selection"></span>').appendTo(this.$container);
        this.$rendered = $('<ul class="select2-selection__rendered"></ul>').appendTo($('<span class="select2-selection"></span>').appendTo(this.$selection));
        this.$search = $('<input type="text" class="select2-search__field" autocomplete="off" />').appendTo(this.$selection.find('.select2-selection'));
        this.$dropdown = $('<span class="select2-dropdown"></span>').appendTo('body');
        this.$results = $('<ul class="select2-results__options"></ul>').appendTo(this.$dropdown);

        if (this.options.placeholder) {
            this.$search.attr('placeholder', this.options.placeholder);
        }

        if (this.disabled) {
            this.$container.addClass('select2-container--disabled');
            this.$search.prop('disabled', true);
        }

        this.$element.after(this.$container);

        this._bindEvents();
        this._renderExisting();
        this._close();
    };

    Select2.prototype._bindEvents = function() {
        var self = this;
        this.$container.on('mousedown', function(e){
            e.preventDefault();
            if (self.disabled) { return; }
            self.$search.focus();
            self._open();
        });

        this.$search.on('keyup', function(){
            var term = $(this).val();
            if (term.length < self.options.minimumInputLength) {
                self.$results.empty();
                return;
            }
            if (self.searchTimer) {
                clearTimeout(self.searchTimer);
            }
            self.searchTimer = setTimeout(function(){
                self._performSearch(term);
            }, 250);
        });

        this.$results.on('mouseenter', '.select2-results__option', function(){
            self.$results.find('.select2-results__option--highlighted').removeClass('select2-results__option--highlighted');
            $(this).addClass('select2-results__option--highlighted');
        });

        this.$results.on('mousedown', '.select2-results__option', function(e){
            e.preventDefault();
            var data = $(this).data('data');
            if (data) {
                self._selectItem(data);
            }
        });

        $(document).on('mousedown.select2', function(e){
            if (!self.$container.is(e.target) && self.$container.has(e.target).length === 0 && !self.$dropdown.is(e.target) && self.$dropdown.has(e.target).length === 0) {
                self._close();
            }
        });

        this.$rendered.on('click', '.select2-selection__choice__remove', function(e){
            e.stopPropagation();
            var $choice = $(this).closest('.select2-selection__choice');
            var data = $choice.data('data');
            if (data) {
                self._unselectItem(data.id);
            }
        });
    };

    Select2.prototype._renderExisting = function() {
        var self = this;
        this.$element.find('option:selected').each(function(){
            var $opt = $(this);
            self._appendChoice({ id: $opt.val(), text: $opt.text() });
        });
    };

    Select2.prototype._performSearch = function(term) {
        var self = this;
        if (!this.options.ajax || !this.options.ajax.url) {
            return;
        }
        var cacheKey = term;
        if (this.cache[cacheKey]) {
            this._renderResults(this.cache[cacheKey]);
            return;
        }

        var ajaxOptions = this.options.ajax;
        $.ajax({
            url: typeof ajaxOptions.url === 'function' ? ajaxOptions.url() : ajaxOptions.url,
            type: ajaxOptions.type || 'GET',
            dataType: ajaxOptions.dataType || 'json',
            delay: ajaxOptions.delay || 0,
            data: ajaxOptions.data ? ajaxOptions.data({ term: term }) : { q: term },
            success: function(response){
                var processed = ajaxOptions.processResults ? ajaxOptions.processResults(response) : response;
                var results = processed && processed.results ? processed.results : [];
                self.cache[cacheKey] = results;
                self._renderResults(results);
            }
        });
    };

    Select2.prototype._renderResults = function(results) {
        var self = this;
        this.$results.empty();
        if (!results || !results.length) {
            this.$results.append('<li class="select2-results__option">Aucun résultat</li>');
            return;
        }
        results.forEach(function(item){
            var $option = $('<li class="select2-results__option"></li>').text(item.text || item.id);
            $option.data('data', item);
            if (self._isSelected(item.id)) {
                $option.addClass('select2-results__option--disabled');
            }
            self.$results.append($option);
        });
        this._open();
    };

    Select2.prototype._open = function() {
        if (this.disabled) { return; }
        var offset = this.$container.offset();
        this.$dropdown.css({
            width: this.$container.outerWidth(),
            left: offset.left,
            top: offset.top + this.$container.outerHeight()
        }).show();
    };

    Select2.prototype._close = function() {
        this.$dropdown.hide();
    };

    Select2.prototype._selectItem = function(data) {
        if (!data || this._isSelected(data.id)) {
            this._close();
            return;
        }
        var $option = this.$element.find('option[value="' + data.id + '"]');
        if (!$option.length) {
            $option = $('<option></option>').val(data.id).text(data.text || data.id);
            this.$element.append($option);
        }
        $option.prop('selected', true).trigger('change');
        this._appendChoice(data);
        this.$search.val('');
        this._close();
    };

    Select2.prototype._appendChoice = function(data) {
        if (!data) { return; }
        var $choice = $('<li class="select2-selection__choice"></li>');
        $choice.text(data.text || data.id);
        var $remove = $('<span class="select2-selection__choice__remove" role="button" aria-hidden="true">×</span>');
        $choice.append($remove);
        $choice.data('data', data);
        this.$rendered.append($choice);
    };

    Select2.prototype._unselectItem = function(id) {
        var self = this;
        this.$element.find('option[value="' + id + '"]').prop('selected', false);
        this.$rendered.find('.select2-selection__choice').each(function(){
            var data = $(this).data('data');
            if (data && data.id == id) {
                $(this).remove();
            }
        });
        this.$element.trigger('change');
        if (this.options.ajax && this.options.ajax.cache) {
            this.cache = {};
        }
    };

    Select2.prototype._isSelected = function(id) {
        var found = false;
        this.$element.find('option:selected').each(function(){
            if ($(this).val() == id) {
                found = true;
                return false;
            }
        });
        return found;
    };

    $.fn.select2 = function(options) {
        return this.each(function(){
            var instance = $.data(this, 'select2');
            if (!instance) {
                instance = new Select2(this, options);
                $.data(this, 'select2', instance);
            }
        });
    };

    return Select2;
}));
