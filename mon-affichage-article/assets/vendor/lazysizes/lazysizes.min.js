(function(window, document){
    'use strict';

    if (window.lazySizes) {
        return;
    }

    var lazySizes = {};
    var observer;
    var elements = new Set();
    var fallbackScheduled = false;

    function toArray(nodeList) {
        return Array.prototype.slice.call(nodeList || []);
    }

    function unveil(el) {
        if (!el || el.dataset.lazyloaded === 'true') {
            return;
        }

        var src = el.getAttribute('data-src');
        var srcset = el.getAttribute('data-srcset');
        if (src) {
            el.setAttribute('src', src);
        }
        if (srcset) {
            el.setAttribute('srcset', srcset);
        }
        el.classList.remove('lazyload');
        el.classList.add('lazyloaded');
        el.dataset.lazyloaded = 'true';
        elements.delete(el);
    }

    function onIntersection(entries) {
        entries.forEach(function(entry){
            if (entry.isIntersecting || entry.intersectionRatio > 0) {
                unveil(entry.target);
                if (observer) {
                    observer.unobserve(entry.target);
                }
            }
        });
    }

    function observe(el) {
        if (!el || elements.has(el)) {
            return;
        }
        elements.add(el);
        if (observer) {
            observer.observe(el);
        }
    }

    function requestFallbackCheck() {
        if (observer) {
            return;
        }
        if (!fallbackScheduled) {
            fallbackScheduled = true;
            window.setTimeout(function(){
                fallbackScheduled = false;
                elements.forEach(function(el){
                    var rect = el.getBoundingClientRect();
                    if (rect.bottom >= 0 && rect.right >= 0 && rect.top <= (window.innerHeight || document.documentElement.clientHeight) && rect.left <= (window.innerWidth || document.documentElement.clientWidth)) {
                        unveil(el);
                    }
                });
            }, 200);
        }
    }

    function init() {
        var nodes = toArray(document.querySelectorAll('img.lazyload, iframe.lazyload'));
        nodes.forEach(function(el){
            observe(el);
        });
        requestFallbackCheck();
    }

    if ('IntersectionObserver' in window) {
        observer = new IntersectionObserver(onIntersection, {
            rootMargin: '200px 0px'
        });
    } else {
        ['scroll', 'resize', 'orientationchange'].forEach(function(evt){
            window.addEventListener(evt, requestFallbackCheck, true);
        });
    }

    document.addEventListener('DOMContentLoaded', init);
    window.addEventListener('load', init);

    lazySizes.init = init;
    lazySizes.load = unveil;

    window.lazySizes = lazySizes;
})(window, document);
