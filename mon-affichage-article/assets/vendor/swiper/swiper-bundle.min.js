(function (window, document) {
    'use strict';

    function resolveElement(target) {
        if (!target) {
            return null;
        }

        if (typeof target === 'string') {
            return document.querySelector(target);
        }

        if (target.nodeType) {
            return target;
        }

        return null;
    }

    function getClientX(event) {
        if (event.touches && event.touches.length) {
            return event.touches[0].clientX;
        }

        if (event.changedTouches && event.changedTouches.length) {
            return event.changedTouches[0].clientX;
        }

        return event.clientX;
    }

    function mergeObjects(target, source) {
        if (!source) {
            return target;
        }

        Object.keys(source).forEach(function (key) {
            var value = source[key];
            var isDomNode = value && typeof value === 'object' && typeof value.nodeType === 'number';

            if (value && typeof value === 'object' && !Array.isArray(value) && !isDomNode) {
                if (!target[key] || typeof target[key] !== 'object' || Array.isArray(target[key])) {
                    target[key] = {};
                }

                mergeObjects(target[key], value);
            } else {
                target[key] = value;
            }
        });

        return target;
    }

    var DEFAULTS = {
        loop: false,
        watchOverflow: true,
        slidesPerView: 1,
        spaceBetween: 0,
        breakpoints: {},
        pagination: {
            el: null,
            clickable: true,
            bulletClass: 'swiper-pagination-bullet',
            bulletActiveClass: 'swiper-pagination-bullet-active',
            renderBullet: null,
        },
        navigation: {
            nextEl: null,
            prevEl: null,
        },
        keyboard: {
            enabled: false,
            onlyInViewport: true,
        },
        autoplay: false,
    };

    function Swiper(container, options) {
        this.container = resolveElement(container);
        if (!this.container) {
            throw new Error('Swiper container not found');
        }

        this.params = mergeObjects(mergeObjects({}, DEFAULTS), options || {});
        this.options = this.params;
        this.wrapper = this.container.querySelector('.swiper-wrapper');
        if (!this.wrapper) {
            throw new Error('Swiper wrapper not found');
        }

        this.slides = Array.prototype.slice.call(this.wrapper.children);
        this.breakpoints = this.params.breakpoints || {};
        this.loop = !!this.params.loop;
        this.activeIndex = 0;
        this.realIndex = 0;
        this.isBeginning = true;
        this.isEnd = false;
        this.pagination = {
            el: resolveElement(this.params.pagination && this.params.pagination.el),
            bullets: [],
            bulletClass: (this.params.pagination && this.params.pagination.bulletClass) || 'swiper-pagination-bullet',
            bulletActiveClass:
                (this.params.pagination && this.params.pagination.bulletActiveClass) || 'swiper-pagination-bullet-active',
        };
        this.navigation = {
            nextEl: resolveElement(this.params.navigation && this.params.navigation.nextEl),
            prevEl: resolveElement(this.params.navigation && this.params.navigation.prevEl),
        };
        this.autoplay = null;
        this._eventHandlers = {};
        this._destroyed = false;
        this._isDragging = false;
        this._cachedPerView = null;
        this._cachedSpaceBetween = null;
        this._boundResizeHandler = null;
        this._handleKeydownBound = null;
        this._handlePaginationClick = null;
        this._handleNextClick = null;
        this._handlePrevClick = null;
        this._handlePointerDown = null;
        this._handleMouseEnter = null;
        this._handleMouseLeave = null;
        this._handleAutoplayInteraction = null;
        this._autoplayTimer = null;
        this._autoplayStoppedByInteraction = false;
        this._autoplayPausedByMouse = false;

        this._init();
    }

    Swiper.prototype._init = function () {
        var self = this;

        this.wrapper.style.transition = 'transform 0.4s ease';

        this._createPagination();
        this._attachNavigation();
        this._attachInteractions();
        this._setupKeyboard();

        this._boundResizeHandler = function () {
            window.requestAnimationFrame(function () {
                self.update();
            });
        };
        window.addEventListener('resize', this._boundResizeHandler);

        this.update();
        this._setupAutoplay();
        this._emit('init');
    };

    Swiper.prototype._emit = function (eventName) {
        if (!eventName) {
            return;
        }

        if (this.options && this.options.on && typeof this.options.on[eventName] === 'function') {
            this.options.on[eventName].call(this);
        }

        var handlers = this._eventHandlers[eventName];
        if (handlers && handlers.length) {
            handlers.forEach(function (handler) {
                try {
                    handler.call(this);
                } catch (error) {
                    // Ignore handler errors to avoid breaking the slider.
                }
            }, this);
        }
    };

    Swiper.prototype.on = function (eventName, handler) {
        if (!eventName || typeof handler !== 'function') {
            return;
        }

        if (!this._eventHandlers[eventName]) {
            this._eventHandlers[eventName] = [];
        }

        this._eventHandlers[eventName].push(handler);
    };

    Swiper.prototype._setupKeyboard = function () {
        if (!this.params.keyboard || !this.params.keyboard.enabled) {
            return;
        }

        if (!this.container.hasAttribute('tabindex')) {
            this.container.setAttribute('tabindex', '0');
        }

        this._handleKeydownBound = this._handleKeydown.bind(this);
        this.container.addEventListener('keydown', this._handleKeydownBound);
    };

    Swiper.prototype._handleKeydown = function (event) {
        var key = event.key || event.keyCode;

        if (key === 'ArrowRight' || key === 'Right' || key === 39) {
            event.preventDefault();
            this.slideNext();
        } else if (key === 'ArrowLeft' || key === 'Left' || key === 37) {
            event.preventDefault();
            this.slidePrev();
        } else if (key === 'Home' || key === 36) {
            event.preventDefault();
            this.slideTo(0);
        } else if (key === 'End' || key === 35) {
            event.preventDefault();
            var perView = this._getSlidesPerView();
            var maxIndex = Math.max(0, this.slides.length - perView);
            this.slideTo(maxIndex);
        }
    };

    Swiper.prototype.update = function () {
        if (this._destroyed) {
            return;
        }

        this.slides = Array.prototype.slice.call(this.wrapper.children);

        var perView = this._getSlidesPerView();
        var spaceBetween = this._getSpaceBetween();

        if (this._cachedPerView !== perView || this._cachedSpaceBetween !== spaceBetween) {
            this._cachedPerView = perView;
            this._cachedSpaceBetween = spaceBetween;
            this._applyLayout(perView, spaceBetween);
        }

        this.pagination.el = resolveElement(this.params.pagination && this.params.pagination.el) || this.pagination.el;
        this._renderPagination();
        this._updateEdgeState();
        this._translate();
    };

    Swiper.prototype._getSlidesPerView = function () {
        var base = parseFloat(this.params.slidesPerView) || 1;
        var width = window.innerWidth || document.documentElement.clientWidth;
        var matched = base;
        var breakpoints = this.breakpoints;

        Object.keys(breakpoints).forEach(function (bp) {
            var breakpoint = parseInt(bp, 10);
            if (width >= breakpoint) {
                if (breakpoints[bp] && breakpoints[bp].slidesPerView) {
                    matched = breakpoints[bp].slidesPerView;
                }
            }
        });

        return Math.max(1, matched);
    };

    Swiper.prototype._getSpaceBetween = function () {
        var base = typeof this.params.spaceBetween === 'number' ? this.params.spaceBetween : 0;
        var width = window.innerWidth || document.documentElement.clientWidth;
        var matched = base;
        var breakpoints = this.breakpoints;

        Object.keys(breakpoints).forEach(function (bp) {
            var breakpoint = parseInt(bp, 10);
            if (width >= breakpoint) {
                if (breakpoints[bp] && typeof breakpoints[bp].spaceBetween === 'number') {
                    matched = breakpoints[bp].spaceBetween;
                }
            }
        });

        return matched;
    };

    Swiper.prototype._applyLayout = function (perView, spaceBetween) {
        var containerWidth = this.container.clientWidth;
        if (!containerWidth) {
            containerWidth = this.container.getBoundingClientRect().width;
        }

        var totalSpacing = spaceBetween * Math.max(perView - 1, 0);
        var availableWidth = Math.max(containerWidth - totalSpacing, 0);
        var slideWidth = availableWidth / perView;

        for (var i = 0; i < this.slides.length; i += 1) {
            var slide = this.slides[i];
            slide.style.flex = '0 0 ' + slideWidth + 'px';
            slide.style.marginRight = i === this.slides.length - 1 ? '0px' : spaceBetween + 'px';
        }

        this.wrapper.style.gap = '0px';
    };

    Swiper.prototype._createPagination = function () {
        if (!this.params.pagination || !this.params.pagination.el) {
            return;
        }

        this.pagination.el = resolveElement(this.params.pagination.el);
        if (!this.pagination.el || this._handlePaginationClick) {
            return;
        }

        var self = this;
        var bulletSelector = '.' + this.pagination.bulletClass.split(' ').join('.');

        this._handlePaginationClick = function (event) {
            var target = event.target;
            while (target && target !== self.pagination.el) {
                if (target.matches && target.matches(bulletSelector)) {
                    if (target.disabled) {
                        return;
                    }

                    event.preventDefault();
                    var indexAttr = target.getAttribute('data-pagination-index') || target.getAttribute('data-index');
                    var index = parseInt(indexAttr, 10);

                    if (!isNaN(index)) {
                        self.slideTo(index);
                    }

                    return;
                }

                target = target.parentNode;
            }
        };

        this.pagination.el.addEventListener('click', this._handlePaginationClick);
    };

    Swiper.prototype._renderPagination = function () {
        if (!this.pagination.el) {
            this.pagination.bullets = [];
            return;
        }

        var paginationParams = this.params.pagination || {};
        var bulletClass = paginationParams.bulletClass || 'swiper-pagination-bullet';
        var bulletActiveClass = paginationParams.bulletActiveClass || 'swiper-pagination-bullet-active';
        var renderBullet = typeof paginationParams.renderBullet === 'function' ? paginationParams.renderBullet : null;

        this.pagination.bulletClass = bulletClass;
        this.pagination.bulletActiveClass = bulletActiveClass;

        var slidesCount = this.slides.length;
        var perView = this._getSlidesPerView();
        var pages = Math.max(1, slidesCount - perView + 1);
        var html = '';

        for (var i = 0; i < pages; i += 1) {
            if (renderBullet) {
                html += renderBullet.call(this, i, bulletClass);
            } else {
                var activeClass = i === this.activeIndex ? ' ' + bulletActiveClass : '';
                html +=
                    '<button type="button" class="' +
                    bulletClass +
                    activeClass +
                    ' swiper-pagination-bullet-button" data-index="' +
                    i +
                    '" data-pagination-index="' +
                    i +
                    '" aria-label="Slide ' +
                    (i + 1) +
                    '" aria-selected="' +
                    (i === this.activeIndex ? 'true' : 'false') +
                    '"' +
                    (i === this.activeIndex ? '' : ' tabindex="-1"') +
                    '></button>';
            }
        }

        this.pagination.el.innerHTML = html;
        var selector = '.' + bulletClass.split(' ').join('.');
        this.pagination.bullets = this.pagination.el.querySelectorAll(selector);

        Array.prototype.forEach.call(this.pagination.bullets, function (bullet, index) {
            if (!bullet) {
                return;
            }

            if (!bullet.getAttribute('data-pagination-index')) {
                bullet.setAttribute('data-pagination-index', index);
            }

            if (!bullet.getAttribute('data-index')) {
                bullet.setAttribute('data-index', index);
            }
        });

        this._setActiveBullet();
    };

    Swiper.prototype._setActiveBullet = function () {
        if (!this.pagination.el) {
            return;
        }

        var bullets = this.pagination.bullets;
        var bulletActiveClass = this.pagination.bulletActiveClass || 'swiper-pagination-bullet-active';

        Array.prototype.forEach.call(bullets, function (bullet, index) {
            if (!bullet) {
                return;
            }

            if (index === this.activeIndex) {
                if (bullet.classList && !bullet.classList.contains(bulletActiveClass)) {
                    bullet.classList.add(bulletActiveClass);
                }
                bullet.setAttribute('aria-selected', 'true');
                bullet.removeAttribute('tabindex');
            } else {
                if (bullet.classList && bullet.classList.contains(bulletActiveClass)) {
                    bullet.classList.remove(bulletActiveClass);
                }
                bullet.setAttribute('aria-selected', 'false');
                bullet.setAttribute('tabindex', '-1');
            }
        }, this);
    };

    Swiper.prototype._attachNavigation = function () {
        var self = this;

        if (this.navigation.nextEl && !this._handleNextClick) {
            this._handleNextClick = function (event) {
                event.preventDefault();
                self.slideNext();
            };
            this.navigation.nextEl.addEventListener('click', this._handleNextClick);
        }

        if (this.navigation.prevEl && !this._handlePrevClick) {
            this._handlePrevClick = function (event) {
                event.preventDefault();
                self.slidePrev();
            };
            this.navigation.prevEl.addEventListener('click', this._handlePrevClick);
        }
    };

    Swiper.prototype._attachInteractions = function () {
        var self = this;
        var startX = 0;
        var currentX = 0;
        var baseOffset = 0;
        var threshold = 40;

        function onPointerDown(event) {
            if (event.type === 'mousedown' && event.button !== 0) {
                return;
            }

            self._isDragging = true;
            startX = getClientX(event);
            currentX = startX;
            baseOffset = self._calculateOffset(self.activeIndex);
            self.wrapper.style.transition = 'none';

            if (event.type === 'mousedown') {
                event.preventDefault();
            }

            document.addEventListener('mousemove', onPointerMove, { passive: false });
            document.addEventListener('mouseup', onPointerUp);
            document.addEventListener('touchmove', onPointerMove, { passive: false });
            document.addEventListener('touchend', onPointerUp);
            document.addEventListener('touchcancel', onPointerUp);
        }

        function onPointerMove(event) {
            if (!self._isDragging) {
                return;
            }

            currentX = getClientX(event);
            var delta = currentX - startX;

            if (Math.abs(delta) > 2) {
                event.preventDefault();
            }

            self._setWrapperTranslate(-baseOffset + delta);
        }

        function cleanup() {
            document.removeEventListener('mousemove', onPointerMove);
            document.removeEventListener('mouseup', onPointerUp);
            document.removeEventListener('touchmove', onPointerMove);
            document.removeEventListener('touchend', onPointerUp);
            document.removeEventListener('touchcancel', onPointerUp);
        }

        function onPointerUp(event) {
            if (!self._isDragging) {
                return;
            }

            self._isDragging = false;
            cleanup();
            self.wrapper.style.transition = 'transform 0.4s ease';
            currentX = getClientX(event) || currentX;
            var delta = currentX - startX;

            if (Math.abs(delta) > threshold) {
                if (delta < 0) {
                    self.slideNext();
                } else {
                    self.slidePrev();
                }
            } else {
                self._translate();
            }
        }

        this._handlePointerDown = onPointerDown;
        this.container.addEventListener('touchstart', this._handlePointerDown, { passive: false });
        this.container.addEventListener('mousedown', this._handlePointerDown);
    };

    Swiper.prototype._calculateOffset = function (index) {
        var spaceBetween = this._cachedSpaceBetween || 0;
        var slide = this.slides[0];
        if (!slide) {
            return 0;
        }

        var slideWidth = slide.getBoundingClientRect().width;
        return (slideWidth + spaceBetween) * index;
    };

    Swiper.prototype._setWrapperTranslate = function (value) {
        this.wrapper.style.transform = 'translateX(' + value + 'px)';
    };

    Swiper.prototype._translate = function () {
        var offset = this._calculateOffset(this.activeIndex);
        this._setWrapperTranslate(-offset);
        this._setActiveBullet();
        this._updateEdgeState();
    };

    Swiper.prototype._updateEdgeState = function () {
        var perView = this._getSlidesPerView();
        var maxIndex = Math.max(0, this.slides.length - perView);
        this.realIndex = this.activeIndex;
        this.isBeginning = this.activeIndex <= 0;
        this.isEnd = this.activeIndex >= maxIndex;
    };

    Swiper.prototype.slideTo = function (index) {
        var perView = this._getSlidesPerView();
        var maxIndex = Math.max(0, this.slides.length - perView);
        var nextIndex = Math.min(Math.max(index, 0), maxIndex);

        if (this.loop) {
            if (index < 0) {
                nextIndex = maxIndex;
            } else if (index > maxIndex) {
                nextIndex = 0;
            }
        }

        this.activeIndex = nextIndex;
        this._translate();
        this._restartAutoplay();
        this._emit('slideChange');
    };

    Swiper.prototype.slideNext = function () {
        this.slideTo(this.activeIndex + 1);
    };

    Swiper.prototype.slidePrev = function () {
        this.slideTo(this.activeIndex - 1);
    };

    Swiper.prototype._startAutoplayTimer = function (delay) {
        var self = this;

        if (!delay || delay <= 0) {
            return;
        }

        this._clearAutoplayTimer();
        this._autoplayTimer = window.setInterval(function () {
            if (self._isDragging) {
                return;
            }

            self.slideNext();
        }, delay);

        if (this.autoplay) {
            this.autoplay.running = true;
        }
    };

    Swiper.prototype._clearAutoplayTimer = function () {
        if (this._autoplayTimer) {
            window.clearInterval(this._autoplayTimer);
            this._autoplayTimer = null;
        }

        if (this.autoplay) {
            this.autoplay.running = false;
        }
    };

    Swiper.prototype._restartAutoplay = function () {
        if (!this.autoplay) {
            return;
        }

        if (this._autoplayStoppedByInteraction || this._autoplayPausedByMouse) {
            return;
        }

        var delay = this.params.autoplay && typeof this.params.autoplay.delay === 'number' ? this.params.autoplay.delay : 5000;
        this._startAutoplayTimer(delay);
    };

    Swiper.prototype._setupAutoplay = function () {
        var autoplayParams = this.params.autoplay;
        if (!autoplayParams) {
            return;
        }

        if (autoplayParams === true) {
            autoplayParams = { delay: 5000 };
        }

        var delay = typeof autoplayParams.delay === 'number' ? autoplayParams.delay : 5000;
        var disableOnInteraction = autoplayParams.disableOnInteraction !== false;
        var pauseOnMouseEnter = !!autoplayParams.pauseOnMouseEnter;
        var self = this;

        this.autoplay = {
            running: false,
            start: function () {
                self._autoplayStoppedByInteraction = false;
                self._startAutoplayTimer(delay);
            },
            stop: function () {
                self._autoplayStoppedByInteraction = true;
                self._clearAutoplayTimer();
            },
        };

        if (pauseOnMouseEnter && this.container) {
            this._handleMouseEnter = function () {
                self._autoplayPausedByMouse = true;
                self._clearAutoplayTimer();
            };

            this._handleMouseLeave = function () {
                self._autoplayPausedByMouse = false;
                if (!self._autoplayStoppedByInteraction) {
                    self._startAutoplayTimer(delay);
                }
            };

            this.container.addEventListener('mouseenter', this._handleMouseEnter);
            this.container.addEventListener('mouseleave', this._handleMouseLeave);
        }

        if (disableOnInteraction && this.container) {
            this._handleAutoplayInteraction = function () {
                if (self.autoplay) {
                    self.autoplay.stop();
                }
            };

            ['touchstart', 'pointerdown', 'mousedown', 'keydown'].forEach(function (eventName) {
                self.container.addEventListener(eventName, self._handleAutoplayInteraction, { passive: true });
            });
        }

        this.autoplay.start();
    };

    Swiper.prototype.destroy = function () {
        if (this._destroyed) {
            return;
        }

        this._destroyed = true;

        if (this.autoplay && typeof this.autoplay.stop === 'function') {
            this.autoplay.stop();
        }

        this._clearAutoplayTimer();

        if (this._boundResizeHandler) {
            window.removeEventListener('resize', this._boundResizeHandler);
        }

        if (this._handleKeydownBound) {
            this.container.removeEventListener('keydown', this._handleKeydownBound);
        }

        if (this._handlePaginationClick && this.pagination.el) {
            this.pagination.el.removeEventListener('click', this._handlePaginationClick);
        }

        if (this._handleNextClick && this.navigation.nextEl) {
            this.navigation.nextEl.removeEventListener('click', this._handleNextClick);
        }

        if (this._handlePrevClick && this.navigation.prevEl) {
            this.navigation.prevEl.removeEventListener('click', this._handlePrevClick);
        }

        if (this._handlePointerDown) {
            this.container.removeEventListener('touchstart', this._handlePointerDown);
            this.container.removeEventListener('mousedown', this._handlePointerDown);
        }

        if (this._handleMouseEnter) {
            this.container.removeEventListener('mouseenter', this._handleMouseEnter);
        }

        if (this._handleMouseLeave) {
            this.container.removeEventListener('mouseleave', this._handleMouseLeave);
        }

        if (this._handleAutoplayInteraction) {
            var self = this;
            ['touchstart', 'pointerdown', 'mousedown', 'keydown'].forEach(function (eventName) {
                self.container.removeEventListener(eventName, self._handleAutoplayInteraction);
            });
        }

        this._emit('destroy');
        this._eventHandlers.destroy = [];
    };

    window.Swiper = Swiper;
})(window, document);
