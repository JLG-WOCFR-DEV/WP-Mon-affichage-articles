(function(window, document){
    'use strict';

    function resolveElement(target) {
        if (!target) { return null; }
        if (typeof target === 'string') {
            return document.querySelector(target);
        }
        return target;
    }

    function getClientX(event) {
        if (event.touches && event.touches.length) {
            return event.touches[0].clientX;
        }
        if (event.changedTouches && event.changedTouches.length) {
            return event.changedTouches[0].clientX;
        }
        return event.clientX;
    }

    function Swiper(container, options) {
        this.container = resolveElement(container);
        if (!this.container) {
            throw new Error('Swiper container not found');
        }
        this.options = options || {};
        this.wrapper = this.container.querySelector('.swiper-wrapper');
        if (!this.wrapper) {
            throw new Error('Swiper wrapper not found');
        }
        this.slides = Array.prototype.slice.call(this.wrapper.children);
        this.activeIndex = 0;
        this.breakpoints = this.options.breakpoints || {};
        this.loop = !!this.options.loop;
        this.paginationEl = resolveElement(this.options.pagination && this.options.pagination.el);
        this.navigationNext = resolveElement(this.options.navigation && this.options.navigation.nextEl);
        this.navigationPrev = resolveElement(this.options.navigation && this.options.navigation.prevEl);
        this.cache = { slidesPerView: null, spaceBetween: null };
        this._isDragging = false;
        this._init();
    }

    Swiper.prototype._init = function() {
        var self = this;
        this.wrapper.style.transition = 'transform 0.4s ease';
        if (this.paginationEl) {
            this.paginationEl.innerHTML = '';
        }
        this._createPagination();
        this._attachNavigation();
        this._attachInteractions();
        window.addEventListener('resize', function(){
            window.requestAnimationFrame(function(){
                self.update();
            });
        });
        this.update();
        if (this.options.on && typeof this.options.on.init === 'function') {
            this.options.on.init.call(this);
        }
    };

    Swiper.prototype._getSlidesPerView = function() {
        var base = parseFloat(this.options.slidesPerView) || 1;
        var width = window.innerWidth || document.documentElement.clientWidth;
        var matched = base;
        var breakpoints = this.breakpoints;
        Object.keys(breakpoints).forEach(function(bp){
            var breakpoint = parseInt(bp, 10);
            if (width >= breakpoint) {
                if (breakpoints[bp] && breakpoints[bp].slidesPerView) {
                    matched = breakpoints[bp].slidesPerView;
                }
            }
        });
        return Math.max(1, matched);
    };

    Swiper.prototype._getSpaceBetween = function() {
        var base = typeof this.options.spaceBetween === 'number' ? this.options.spaceBetween : 0;
        var width = window.innerWidth || document.documentElement.clientWidth;
        var matched = base;
        var breakpoints = this.breakpoints;
        Object.keys(breakpoints).forEach(function(bp){
            var breakpoint = parseInt(bp, 10);
            if (width >= breakpoint) {
                if (breakpoints[bp] && typeof breakpoints[bp].spaceBetween === 'number') {
                    matched = breakpoints[bp].spaceBetween;
                }
            }
        });
        return matched;
    };

    Swiper.prototype._attachNavigation = function() {
        var self = this;
        if (this.navigationNext) {
            this.navigationNext.addEventListener('click', function(e){
                e.preventDefault();
                self.slideNext();
            });
        }
        if (this.navigationPrev) {
            this.navigationPrev.addEventListener('click', function(e){
                e.preventDefault();
                self.slidePrev();
            });
        }
    };

    Swiper.prototype._createPagination = function() {
        var self = this;
        if (!this.paginationEl) {
            return;
        }
        this.paginationEl.addEventListener('click', function(e){
            var bullet = e.target.closest('.swiper-pagination-bullet');
            if (!bullet) {
                return;
            }
            e.preventDefault();
            var index = parseInt(bullet.getAttribute('data-index'), 10);
            if (!isNaN(index)) {
                self.slideTo(index);
            }
        });
    };

    Swiper.prototype._renderPagination = function() {
        if (!this.paginationEl) {
            return;
        }
        var slidesCount = this.slides.length;
        var perView = this._getSlidesPerView();
        var pages = Math.max(1, slidesCount - perView + 1);
        var html = '';
        for (var i = 0; i < pages; i++) {
            var activeClass = (i === this.activeIndex) ? ' swiper-pagination-bullet-active' : '';
            html += '<span class="swiper-pagination-bullet' + activeClass + '" data-index="' + i + '"></span>';
        }
        this.paginationEl.innerHTML = html;
    };

    Swiper.prototype.update = function() {
        this.slides = Array.prototype.slice.call(this.wrapper.children);
        var perView = this._getSlidesPerView();
        var spaceBetween = this._getSpaceBetween();
        if (this.cache.slidesPerView !== perView || this.cache.spaceBetween !== spaceBetween) {
            this.cache.slidesPerView = perView;
            this.cache.spaceBetween = spaceBetween;
            this._applyLayout(perView, spaceBetween);
        }
        this._renderPagination();
        this._translate();
    };

    Swiper.prototype._applyLayout = function(perView, spaceBetween) {
        var containerWidth = this.container.clientWidth;
        if (!containerWidth) {
            containerWidth = this.container.getBoundingClientRect().width;
        }
        var totalSpacing = spaceBetween * Math.max(perView - 1, 0);
        var availableWidth = Math.max(containerWidth - totalSpacing, 0);
        var slideWidth = availableWidth / perView;
        for (var i = 0; i < this.slides.length; i++) {
            var slide = this.slides[i];
            slide.style.flex = '0 0 ' + slideWidth + 'px';
            slide.style.marginRight = (i === this.slides.length - 1) ? '0px' : spaceBetween + 'px';
        }
        this.wrapper.style.gap = '0px';
    };

    Swiper.prototype._calculateOffset = function(index) {
        var spaceBetween = this.cache.spaceBetween || 0;
        var slide = this.slides[0];
        if (!slide) {
            return 0;
        }
        var slideWidth = slide.getBoundingClientRect().width;
        return (slideWidth + spaceBetween) * index;
    };

    Swiper.prototype._setWrapperTranslate = function(value) {
        this.wrapper.style.transform = 'translateX(' + value + 'px)';
    };

    Swiper.prototype._translate = function() {
        var offset = this._calculateOffset(this.activeIndex);
        this._setWrapperTranslate(-offset);
        this._setActiveBullet();
    };

    Swiper.prototype._setActiveBullet = function() {
        if (!this.paginationEl) {
            return;
        }
        var bullets = this.paginationEl.querySelectorAll('.swiper-pagination-bullet');
        Array.prototype.forEach.call(bullets, function(bullet){
            var index = parseInt(bullet.getAttribute('data-index'), 10);
            if (index === this.activeIndex) {
                bullet.classList.add('swiper-pagination-bullet-active');
            } else {
                bullet.classList.remove('swiper-pagination-bullet-active');
            }
        }, this);
    };

    Swiper.prototype.slideTo = function(index) {
        var perView = this._getSlidesPerView();
        var maxIndex = Math.max(0, this.slides.length - perView);
        this.activeIndex = Math.min(Math.max(index, 0), maxIndex);
        this._translate();
    };

    Swiper.prototype.slideNext = function() {
        var perView = this._getSlidesPerView();
        var maxIndex = Math.max(0, this.slides.length - perView);
        if (this.activeIndex < maxIndex) {
            this.activeIndex += 1;
        } else if (this.loop) {
            this.activeIndex = 0;
        }
        this._translate();
    };

    Swiper.prototype._attachInteractions = function() {
        var self = this;
        var startX = 0;
        var currentX = 0;
        var baseOffset = 0;
        var threshold = 40;

        function onPointerDown(event) {
            if (event.type === 'mousedown' && event.button !== 0) {
                return;
            }
            self._isDragging = true;
            startX = getClientX(event);
            currentX = startX;
            baseOffset = self._calculateOffset(self.activeIndex);
            self.wrapper.style.transition = 'none';
            if (event.type === 'mousedown') {
                event.preventDefault();
            }
            document.addEventListener('mousemove', onPointerMove, { passive: false });
            document.addEventListener('mouseup', onPointerUp);
            document.addEventListener('touchmove', onPointerMove, { passive: false });
            document.addEventListener('touchend', onPointerUp);
            document.addEventListener('touchcancel', onPointerUp);
        }

        function onPointerMove(event) {
            if (!self._isDragging) {
                return;
            }
            currentX = getClientX(event);
            var delta = currentX - startX;
            if (Math.abs(delta) > 2) {
                event.preventDefault();
            }
            self._setWrapperTranslate(-baseOffset + delta);
        }

        function cleanup() {
            document.removeEventListener('mousemove', onPointerMove);
            document.removeEventListener('mouseup', onPointerUp);
            document.removeEventListener('touchmove', onPointerMove);
            document.removeEventListener('touchend', onPointerUp);
            document.removeEventListener('touchcancel', onPointerUp);
        }

        function onPointerUp(event) {
            if (!self._isDragging) {
                return;
            }
            self._isDragging = false;
            cleanup();
            self.wrapper.style.transition = 'transform 0.4s ease';
            currentX = getClientX(event) || currentX;
            var delta = currentX - startX;
            if (Math.abs(delta) > threshold) {
                if (delta < 0) {
                    self.slideNext();
                } else {
                    self.slidePrev();
                }
            } else {
                self._translate();
            }
        }

        this.container.addEventListener('touchstart', onPointerDown, { passive: false });
        this.container.addEventListener('mousedown', onPointerDown);
    };

    Swiper.prototype.slidePrev = function() {
        var perView = this._getSlidesPerView();
        var maxIndex = Math.max(0, this.slides.length - perView);
        if (this.activeIndex > 0) {
            this.activeIndex -= 1;
        } else if (this.loop) {
            this.activeIndex = maxIndex;
        }
        this._translate();
    };

    window.Swiper = Swiper;
})(window, document);
